/*
* 문제
양의 정수로 구성된 배열 nums가 주어집니다.
이 배열 내의 세 변을 선택해, 길이가 가장 큰 삼각형을 만들 수 있는 경우 그 삼각형의 둘레를 반환하세요.
삼각형을 만들 수 없다면 0을 반환하세요.

* 조건
1. 3 <= nums.length <= 10^4
2. 1 <= nums[i] <= 10^6

* 삼각형의 조건
삼각형이 성립하기 위해서는, 삼각형의 세 변 길이를 a, b, c라고 할 때 다음 조건을 만족해야 합니다:
1. a+b>c
2. a+c>b
3. b+c>a
이 조건을 만족하기 위해 배열을 내림차순으로 정렬한 후,
가장 큰 값부터 시작하여 세 개의 변을 선택하고 삼각형 조건을 만족하는지 확인하면 됩니다.

* 예시
1. 입력: nums = [2, 1, 2] 출력: 5
	설명: 배열 [2, 1, 2]는 정렬 후 [2, 2, 1]이 되고, 2 + 2 > 1 조건을 만족하므로 둘레는 2 + 2 + 1 = 5입니다.

2. 입력: nums = [1, 2, 1] 출력: 0
	설명: 정렬 후 [2, 1, 1]이며, 어떤 조합도 삼각형 조건을 만족하지 않으므로 둘레를 만들 수 없습니다.

3. 입력: nums = [3, 2, 3, 4] 출력: 10
	설명: 정렬 후 [4, 3, 3, 2]입니다. 첫 세 개의 변 (4, 3, 3)은 삼각형 조건을 만족하므로 둘레는 4 + 3 + 3 = 10입니다.

4. 입력: nums = [3, 6, 2, 3] 출력: 8
	설명: 정렬 후 [6, 3, 3, 2]입니다. 첫 번째 세 변 (6, 3, 3)은 조건을 만족하지 않지만, (3, 3, 2)는 만족하므로 둘레는 3 + 3 + 2 = 8입니다
*/

class Solution {
  int largestPerimeter(List<int> nums) {
    // 내림차순 정렬
    nums.sort((a, b) => b.compareTo(a));
    print(nums);

    // 3개 중 가장 큰 인덱스
    int idx = 0;
    int value = 0;

    while (idx < idx + 3) {
      if (idx + 3 > nums.length) break;

      int a = nums[idx];
      int b = nums[idx + 1];
      int c = nums[idx + 2];

      // 1. a+b>c
      // 2. a+c>b
      // 3. b+c>a

      // 조건 만족하면 둘레 할당하고 반복문 멈춤
      if (a + b > c && a + c > b && b + c > a) {
        value = a + b + c;
        break;
      }

      // 위의 조건을 만족 못했는데 nums의 길이가 3개면 바로 멈춤
      // 0을 반환해야하기 때문
      if (nums.length == 3) break;

      // nums의 길이가 3보다 크다면 인덱스를 증가
      idx++;
    }

    return value;
  }
}
